#!/bin/bash
#
# ------------------------------------------------------------------
# bootDevHelper
#
# Description : Helps simplify the running and submission process for bootDev
#               courses that use the CMD line too. Saves the last used key and
#               allows for quick re-run of the tests or simple submission.
# Usage       : ./bootDevHelper
#
# Author      : Cameron Robinson 
# Created     : 2025-06-30
# Version     : 1.0
#
# License     : GNU Affero General Public License v3.0 (AGPLv3)
# ------------------------------------------------------------------

tempDir="$HOME/.cache/bootDevHelper"
bdCache="$tempDir/bdHelperCache"
bootDevConfig="$HOME/.bootdev.yaml"

mkdir -p "$tempDir"
if [[ ! -f "$bdCache" ]]; then
    touch "$bdCache"
fi

function checkForKey() {
    count=0
    key=""
    for arg in "$@"; do
        if [[ "$count" -eq 0 && "$arg" =~ http.*boot\.dev.*\/([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}) ]]; then
            key="${BASH_REMATCH[1]}"
            break
        fi
        if [[ "$count" -eq 0 ]]; then
            if [[ ! "$arg" =~ bootdev ]]; then
                echo ""
                return 1
            fi
            count=$((count + 1))
            continue
        fi
        if [[ "$count" -eq 1 ]]; then
            if [[ ! "$arg" =~ run ]]; then
                echo ""
                return 2
            fi
            count=$((count + 1))
            continue
        fi
        if [[ "$count" -eq 2 ]]; then
            if [[ ! "$arg" =~ [a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12} ]]; then
                echo ""
                return 3
            fi
            key="$arg"
            break 
        fi
    done
    echo "$key"
    return 0
}

function runKey() {
    key=$1
    if [[ -z "$key" ]]; then
        echo "Bad key, could not submit. Closing."
        exit 2
    fi
    bootdev run "$key" 
}

function submitKey() {
    key=$1
    if [[ -z "$key" ]]; then
        echo "Bad key, could not submit. Closing."
        exit 2
    fi
    bootdev run "$key" -s
}
function fetchMetaData() {
    key="$1"
    token="$2"
    if [[ -z "$key" ]]; then
        echo "Bad key"
        return 1
    fi
    if [[ -z "$token" ]]; then
        echo "Bad token"
        return 2
    fi
    response=$(curl -s -X GET "https://api.boot.dev/v1/lessons/$key" -H "Authorization: Bearer $token" -H "Content-Type: application/json")

    courseTitle=$(echo "$response" | jq -r '.Lesson.CourseTitle')

    chapterTitle=$(echo "$response" | jq -r '.Lesson.ChapterTitle')
    chapterNumber=$(echo "$response" | jq -r '.Lesson.ChapterSlug')
    if [[ ! "$chapterNumber" =~ ([0-9]+)-.* ]]; then
        chapterNumber=""
    else
        chapterNumber="${BASH_REMATCH[1]}"
    fi

    lessionTitle=$(echo "$response" | jq -r '.Lesson.Title')
    lessionNumber=$(echo "$response" | jq -r '.Lesson.Slug')
    if [[ ! "$lessionNumber" =~ ([0-9]+)-.* ]]; then
        lessionNumber=""
    else
        lessionNumber="${BASH_REMATCH[1]}"
    fi
    return 0
}
function readToken() {
    while IFS= read -r line; do
        if [[ ! "$line" =~ access_token:\ (.*) ]]; then
            continue
        fi
        echo "${BASH_REMATCH[1]}"
        break
    done < "$bootDevConfig"
}

state=0
key=""
courseTitle=""
chapterTitle=""
chapterNumber=""
lessionTitle=""
lessionNumber=""
echo ""
echo "Welcome to the BootDev Submission Helper!"
echo "Commands will be executed at: $(pwd)"
echo ""
while true; do
    if [[ (! $state -eq 0) && (! -z "$lessionTitle") ]]; then
        lessionChapter="Chapter $chapterNumber-$lessionNumber: $lessionTitle"
        lessonMissing=$(( ${#courseTitle} - ${#lessionChapter} ))
        lessonSpaces=""
        if [[ $lessionMissing -gt 0 ]]; then
            lessonSpaces=$(printf '%*s' "$lessionMissing" '')
        fi
        courseMissing=$(( ${#lessionChapter} - ${#courseTitle} ))
        courseSpaces=""
        if [[ $courseMissing -gt 0 ]]; then
            courseSpaces=$(printf '%*s' "$courseMissing" '')
        fi

        echo ""
        echo ""
        echo "--------------------------------------"
        echo "--- $courseTitle$courseSpaces ---"
        if [[ (! -z "$chapterNumber") && (! -z "$lessionNumber") ]]; then
            echo "--- $lessionChapter$lessonSpaces ---"
        fi
    fi
    echo "--------------------------------------"
    echo "BootDev Submission Helper Menu:"
    echo "--------------------------------------"
    if [[ ! $state -eq 0 ]]; then
        echo "<Empty Return> : Run current lession ID"
        echo "!              : Submit current lession ID"
    fi
    echo "pwd            : Print the directory this tool is executing in."
    echo ""
    if [[ ! $state -eq 0 ]]; then
        echo "Enter new bootdev run command or lession url to load new lession."
    else
        echo "Enter a bootdev run command or lession url to load lession."
    fi
    echo "    EG:"
    echo "        - bootdev run 12345678-9101-1121-3141-516171819202"
    echo "        - https://www.boot.dev/lessons/12345678-9101-1121-3141-516171819202"
    echo ""
    echo "Enter 'quit' or 'exit' to close."
    echo "--------------------------------------"
    read -ra words -p "> "

    if [[ state -eq 1 ]]; then  
        if [[ ${#words[@]} -eq 0 ]]; then
            echo "--------------------------------------"
            runKey "$key"
            continue
        fi

        if [[ ${#words[@]} -eq 1 && "$words" == "!" ]]; then
            echo "--------------------------------------"
            submitKey "$key"
            continue
        fi
    fi

    if [[ ${#words[@]} -eq 1 && "$words" == "pwd" ]]; then
        echo "Current working directory:"
        echo "$(pwd)"
        continue
    fi

    if [[ ${#words[@]} -eq 1 && ("$words" == "quit" || "$words" == "exit") ]]; then
        echo "Goodbye!"
        break
    fi

    key=($(checkForKey "${words[@]}"))
    if [[ ! $? -eq 0 ]]; then
        echo ""
        echo "Did not supply a proper run command. Please try again."
        echo ""
        continue
    fi

    if [[ $state -eq 0 ]]; then
        state=$((state + 1))
    fi

    token=($(readToken))
    fetchMetaData "$key" "$token"
done

